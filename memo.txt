1. プロジェクト概要 (TL;DR)
目的: 社会福祉法人の居住支援サービスにおける業務効率化。既存のExcelによる煩雑な管理を廃し、一元化されたWebアプリケーションを構築する。
コアコンセプト: 利用者情報を中心とした情報ハブ。利用者の基本情報・相談履歴・支援計画を統合し、迅速な情報アクセスを実現する。
ターゲットユーザー: 社会福祉法人スタッフ。ITスキルは高くないため、シンプルで直感的なUI/UXが最優先。
2. 技術スタック
フロントエンド: Next.js (App Router), React, TypeScript
UI: Tailwind CSS
バックエンド/DB: Supabase (PostgreSQL)
バージョン管理: GitHub
デプロイ: Vercel
3. 主要機能要件
利用者情報ハブ機能:
レイアウト: 左サイドバーに利用者名簿、クリックでメインエリアに詳細表示。
統合表示: 利用者の「基本情報」「相談履歴」「支援計画」を単一画面（タブ形式など）で確認・編集できる。
CRUD: 利用者の追加・編集・削除機能。
相談受付・履歴管理機能:
特徴: 匿名相談に対応。氏名未入力でも相談記録を作成できる。
フロー: まず「相談」として記録され、後に正式な「利用者」として登録・紐付けが可能。
管理: 全相談履歴を一覧表示し、キーワードや担当者で検索・フィルタリングできる。
支援計画機能:
作成: 既存利用者や相談記録から支援計画を作成。
履歴管理: 更新履歴（いつ、誰が更新したか）を自動で保存し、過去のバージョンをいつでも参照できる。
データ管理機能:
インポート: 既存のスプレッドシートから利用者データを一括取り込み。
エクスポート: 利用者情報、相談履歴、支援計画などをCSV/Excel形式で出力。行政報告用のデータ出力を想定。
4. データモデルとフローの核心
このシステムの設計で最も重要なのは、ID管理とデータ連携のフローです。
テーブル構成:
users (利用者マスタ): 正式UIDで管理される、正式登録済みの利用者情報。
consultations (相談テーブル): 全ての相談記録。システム内部ID (UUID) で管理。匿名相談もここに格納。user_idカラムでusersテーブルと関連付く（最初はNULL）。
support_plans (支援計画テーブル): 支援計画の内容と履歴。user_idでusersテーブルと関連付く。
最重要データフロー（匿名相談から利用者登録まで）:
【相談受付】: 新規相談（匿名可）が発生すると、consultationsテーブルに新しいレコードが作成される。この時点ではuser_idはNULL。
【利用者への昇格】: 相談詳細画面や支援計画作成画面の「利用者として正式登録」ボタンが押される。
【UID採番】: システムは新しい正式UIDを自動生成する。
【利用者マスタ登録】: consultationsテーブルの情報を元に、usersテーブルに新しい利用者レコードを作成する。
【データ連携】: 元になったconsultationsレコードのuser_idカラムに、新しく作成された利用者のIDを記録する。これにより、正式登録前の相談履歴も追跡可能になる。
5. UI/UX デザイン指針
一貫性: シンプルで一貫したデザイン言語を適用する。
視覚的ガイダンス: アイコン、色分け、適切な文字サイズ・配置で、どこに何があるか感覚的に分かるようにする。
入力補助: 日付ピッカー、ドロップダウンリスト、入力候補表示を積極的に使用し、入力の手間とミスを削減する。
レスポンシブデザイン: PCでの事務作業と、出先でのタブレット利用の両方を想定する。
6. フォーム詳細について
「相談受付フォーム」と「支援計画フォーム」の項目は、福祉現場特有の非常に詳細なものとなっている。
特徴的な項目:
相談受付フォーム: 相談ルート、属性（高齢、障がい等）、ADL/IADL（日常生活動作）評価、医療・収入情報など、多岐にわたる。
支援計画フォーム: 生活保護・介護保険情報、医療状況、ニーズ（課題）と対応など。
実装上の注意: チェックボックス、ラジオボタン、テキストエリアが多用される。特にADL/IADLのような項目は、UIコンポーネントの工夫が求められる。
詳細な項目リストは元の要件定義書を参照すること。
